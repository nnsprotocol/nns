{
  "address": "0x551AdE51c28b67b66868D61125768d571D2bB8BA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nns",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ens",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ens",
      "outputs": [
        {
          "internalType": "contract ENS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nns",
      "outputs": [
        {
          "internalType": "contract ENS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "resolve",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe599f9263c6188c97484818bb43f95e4fcf7eb36f5841ef5c2ccd6950b4e5194",
  "receipt": {
    "to": null,
    "from": "0x17F08783981Ff47638A046c5b88A0211132db2e0",
    "contractAddress": "0x551AdE51c28b67b66868D61125768d571D2bB8BA",
    "transactionIndex": 55,
    "gasUsed": "631824",
    "logsBloom": "0x
    "blockHash": "0x621d611d442773bb1e4b07d6a18d8a8ba5af46b0a69a518631b7465ffcf519bf",
    "transactionHash": "0xe599f9263c6188c97484818bb43f95e4fcf7eb36f5841ef5c2ccd6950b4e5194",
    "logs": [],
    "blockNumber": 8129099,
    "cumulativeGasUsed": "6116871",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE8E0fFE372608122c10544c2445272eD8E79dbAB",
    "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e"
  ],
  "numDeployments": 16,
  "solcInputHash": "e920b0293043b7706e0ae35aa514b99d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nns\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ens\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nns\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/NNSENSReverseResolver.sol\":\"NNSENSReverseResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0xf79be82c1a2eb0a77fba4e0972221912e803309081ca460fd2cf61653e55758a\"},\"contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the legacy (ETH-only) addr function.\\n */\\ninterface IAddrResolver {\\n    event AddrChanged(bytes32 indexed node, address a);\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x2ad7f2fc60ebe0f93745fe70247f6a854f66af732483fda2a3c5e055614445e8\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/INameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface INameResolver {\\n    event NameChanged(bytes32 indexed node, string name);\\n\\n    /**\\n     * Returns the name associated with an ENS node, for reverse records.\\n     * Defined in EIP181.\\n     * @param node The ENS node to query.\\n     * @return The associated name.\\n     */\\n    function name(bytes32 node) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x9ec392b612447b1acbdc01114f2da2837a658d3f3157f60a99c5269f0b623346\",\"license\":\"MIT\"},\"contracts/utils/ENSNamehash.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nlibrary ENSNamehash {\\n\\n  function namehash(bytes memory domain) internal pure returns (bytes32) {\\n    return namehash(domain, 0);\\n  }\\n\\n  function namehash(bytes memory domain, uint i) internal pure returns (bytes32) {\\n    if (domain.length <= i)\\n      return 0x0000000000000000000000000000000000000000000000000000000000000000;\\n\\n    uint len = LabelLength(domain, i);\\n\\n    return keccak256(abi.encodePacked(namehash(domain, i+len+1), keccak(domain, i, len)));\\n  }\\n\\n  function LabelLength(bytes memory domain, uint i) private pure returns (uint) {\\n    uint len;\\n    while (i+len != domain.length && domain[i+len] != 0x2e) {\\n      len++;\\n    }\\n    return len;\\n  }\\n\\n  function keccak(bytes memory data, uint offset, uint len) private pure returns (bytes32 ret) {\\n    require(offset + len <= data.length);\\n    assembly {\\n      ret := keccak256(add(add(data, 32), offset), len)\\n    }\\n  }\\n}\",\"keccak256\":\"0xa94ed9621f15837c069bb7619641420eb7f0c545b817f3f48b9c8bb1df7c88f5\",\"license\":\"MIT\"},\"contracts/utils/NNSENSReverseResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\nimport {ENS} from '../registry/ENS.sol';\\nimport {INameResolver} from '../resolvers/profiles/INameResolver.sol';\\nimport {IAddrResolver} from '../resolvers/profiles/IAddrResolver.sol';\\nimport './ENSNamehash.sol';\\n\\ncontract NNSENSReverseResolver {\\n\\n  using ENSNamehash for bytes;\\n\\n  bytes32 private constant ADDR_REVERSE_NODE =\\n    0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n  bytes32 private constant ZERO_ADDRESS =\\n    0x918d5359431a7007dec0d4722530b0726c0e1010a959bd8b871a6a5d6337144a;\\n\\n  ENS public immutable ens;\\n  ENS public immutable nns;\\n\\n  constructor(address _nns, address _ens) {\\n    nns = ENS(_nns);\\n    ens = ENS(_ens);\\n  }\\n\\n  function resolve(address addr) public view returns (string memory) {\\n    string memory name = _resolve(addr, nns);\\n    if (bytes(name).length == 0 && address(ens) != address(0)) {\\n      return _resolve(addr, ens);\\n    }\\n    return name;\\n  }\\n\\n  function _resolve(address addr, ENS registry)\\n    private\\n    view\\n    returns (string memory)\\n  {\\n    // Resolve addr to name.\\n    bytes32 n = reverseAddrNode(addr);\\n    address resolverAddress = registry.resolver(n);\\n    if (resolverAddress == address(0)) {\\n      return '';\\n    }\\n    INameResolver nameResolver = INameResolver(resolverAddress);\\n    string memory name = nameResolver.name(n);\\n    if (\\n      bytes(name).length == 0 ||\\n      keccak256(abi.encodePacked(name)) == ZERO_ADDRESS\\n    ) {\\n      return '';\\n    }\\n\\n    // Reverse check.\\n    bytes32 nameNode = bytes(name).namehash();\\n    address addrResolverAddr = registry.resolver(nameNode);\\n    if (addrResolverAddr == address(0)) {\\n      return '';\\n    }\\n    IAddrResolver addrResolver = IAddrResolver(addrResolverAddr);\\n    address revAddr = addrResolver.addr(nameNode);\\n    if (revAddr != addr) {\\n      return '';\\n    }\\n \\n    return name;\\n  }\\n\\n  function reverseAddrNode(address addr) private pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(ADDR_REVERSE_NODE, sha3HexAddress(addr)));\\n  }\\n\\n  function sha3HexAddress(address addr) private pure returns (bytes32 ret) {\\n    addr;\\n    ret; // Stop warning us about unused variables\\n    assembly {\\n      let\\n        lookup\\n      := 0x3031323334353637383961626364656600000000000000000000000000000000\\n\\n      for {\\n        let i := 40\\n      } gt(i, 0) {\\n\\n      } {\\n        i := sub(i, 1)\\n        mstore8(i, byte(and(addr, 0xf), lookup))\\n        addr := div(addr, 0x10)\\n        i := sub(i, 1)\\n        mstore8(i, byte(and(addr, 0xf), lookup))\\n        addr := div(addr, 0x10)\\n      }\\n\\n      ret := keccak256(0, 40)\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x52bfbab20e2d7e2aae766d38ac9ee8d5141944e7bdff85278d52ac468180087b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610b4a380380610b4a83398101604081905261002f91610062565b6001600160a01b0391821660a05216608052610095565b80516001600160a01b038116811461005d57600080fd5b919050565b6000806040838503121561007557600080fd5b61007e83610046565b915061008c60208401610046565b90509250929050565b60805160a051610a7e6100cc6000396000818160bc015260e8015260008181604b0152818161011c015261015f0152610a7e6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633f15457f1461004657806355ea6c4714610097578063c358133b146100b7575b600080fd5b61006d7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100aa6100a53660046107c9565b6100de565b60405161008e9190610816565b61006d7f000000000000000000000000000000000000000000000000000000000000000081565b6060600061010c837f0000000000000000000000000000000000000000000000000000000000000000610190565b90508051600014801561015457507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1615155b1561018a57610183837f0000000000000000000000000000000000000000000000000000000000000000610190565b9392505050565b92915050565b6060600061019d84610567565b6040517f0178b8bf0000000000000000000000000000000000000000000000000000000081526004810182905290915060009073ffffffffffffffffffffffffffffffffffffffff851690630178b8bf90602401602060405180830381865afa15801561020e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102329190610867565b905073ffffffffffffffffffffffffffffffffffffffff811661026857604051806020016040528060008152509250505061018a565b6040517f691f343100000000000000000000000000000000000000000000000000000000815260048101839052819060009073ffffffffffffffffffffffffffffffffffffffff83169063691f343190602401600060405180830381865afa1580156102d8573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261031e91908101906108b3565b905080516000148061037657506040517f918d5359431a7007dec0d4722530b0726c0e1010a959bd8b871a6a5d6337144a9061035e90839060200161097e565b60405160208183030381529060405280519060200120145b15610396576040518060200160405280600081525094505050505061018a565b60006103a1826105c2565b6040517f0178b8bf0000000000000000000000000000000000000000000000000000000081526004810182905290915060009073ffffffffffffffffffffffffffffffffffffffff891690630178b8bf90602401602060405180830381865afa158015610412573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104369190610867565b905073ffffffffffffffffffffffffffffffffffffffff81166104705760405180602001604052806000815250965050505050505061018a565b6040517f3b3b57de00000000000000000000000000000000000000000000000000000000815260048101839052819060009073ffffffffffffffffffffffffffffffffffffffff831690633b3b57de90602401602060405180830381865afa1580156104e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105049190610867565b90508a73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461055857604051806020016040528060008152509850505050505050505061018a565b50929998505050505050505050565b60007f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2610593836105cf565b604080516020810193909352820152606001604051602081830303815290604052805190602001209050919050565b600061018a82600061066f565b60007f303132333435363738396162636465660000000000000000000000000000000060285b8015610662577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01600f841682901a81536010909304927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01600f841682901a81536010840493506105f5565b5050602860002092915050565b6000818351116106815750600061018a565b600061068d84846106e9565b90506106ad8461069d83866109c9565b6106a89060016109c9565b61066f565b6106b8858584610780565b6040805160208101939093528201526060016040516020818303038152906040528051906020012091505092915050565b6000805b83516106f982856109c9565b1415801561076957508361070d82856109c9565b8151811061071d5761071d6109e1565b6020910101517fff00000000000000000000000000000000000000000000000000000000000000167f2e0000000000000000000000000000000000000000000000000000000000000014155b15610183578061077881610a10565b9150506106ed565b825160009061078f83856109c9565b111561079a57600080fd5b5091016020012090565b73ffffffffffffffffffffffffffffffffffffffff811681146107c657600080fd5b50565b6000602082840312156107db57600080fd5b8135610183816107a4565b60005b838110156108015781810151838201526020016107e9565b83811115610810576000848401525b50505050565b60208152600082518060208401526108358160408501602087016107e6565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60006020828403121561087957600080fd5b8151610183816107a4565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602082840312156108c557600080fd5b815167ffffffffffffffff808211156108dd57600080fd5b818401915084601f8301126108f157600080fd5b81518181111561090357610903610884565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561094957610949610884565b8160405282815287602084870101111561096257600080fd5b6109738360208301602088016107e6565b979650505050505050565b600082516109908184602087016107e6565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156109dc576109dc61099a565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a4157610a4161099a565b506001019056fea26469706673582212207d93fbddc28e2bd1cdd4d6b3c0306ee0430bf0b08c8d4df2e950987d2143dcbf64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80633f15457f1461004657806355ea6c4714610097578063c358133b146100b7575b600080fd5b61006d7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100aa6100a53660046107c9565b6100de565b60405161008e9190610816565b61006d7f000000000000000000000000000000000000000000000000000000000000000081565b6060600061010c837f0000000000000000000000000000000000000000000000000000000000000000610190565b90508051600014801561015457507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1615155b1561018a57610183837f0000000000000000000000000000000000000000000000000000000000000000610190565b9392505050565b92915050565b6060600061019d84610567565b6040517f0178b8bf0000000000000000000000000000000000000000000000000000000081526004810182905290915060009073ffffffffffffffffffffffffffffffffffffffff851690630178b8bf90602401602060405180830381865afa15801561020e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102329190610867565b905073ffffffffffffffffffffffffffffffffffffffff811661026857604051806020016040528060008152509250505061018a565b6040517f691f343100000000000000000000000000000000000000000000000000000000815260048101839052819060009073ffffffffffffffffffffffffffffffffffffffff83169063691f343190602401600060405180830381865afa1580156102d8573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261031e91908101906108b3565b905080516000148061037657506040517f918d5359431a7007dec0d4722530b0726c0e1010a959bd8b871a6a5d6337144a9061035e90839060200161097e565b60405160208183030381529060405280519060200120145b15610396576040518060200160405280600081525094505050505061018a565b60006103a1826105c2565b6040517f0178b8bf0000000000000000000000000000000000000000000000000000000081526004810182905290915060009073ffffffffffffffffffffffffffffffffffffffff891690630178b8bf90602401602060405180830381865afa158015610412573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104369190610867565b905073ffffffffffffffffffffffffffffffffffffffff81166104705760405180602001604052806000815250965050505050505061018a565b6040517f3b3b57de00000000000000000000000000000000000000000000000000000000815260048101839052819060009073ffffffffffffffffffffffffffffffffffffffff831690633b3b57de90602401602060405180830381865afa1580156104e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105049190610867565b90508a73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461055857604051806020016040528060008152509850505050505050505061018a565b50929998505050505050505050565b60007f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2610593836105cf565b604080516020810193909352820152606001604051602081830303815290604052805190602001209050919050565b600061018a82600061066f565b60007f303132333435363738396162636465660000000000000000000000000000000060285b8015610662577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01600f841682901a81536010909304927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01600f841682901a81536010840493506105f5565b5050602860002092915050565b6000818351116106815750600061018a565b600061068d84846106e9565b90506106ad8461069d83866109c9565b6106a89060016109c9565b61066f565b6106b8858584610780565b6040805160208101939093528201526060016040516020818303038152906040528051906020012091505092915050565b6000805b83516106f982856109c9565b1415801561076957508361070d82856109c9565b8151811061071d5761071d6109e1565b6020910101517fff00000000000000000000000000000000000000000000000000000000000000167f2e0000000000000000000000000000000000000000000000000000000000000014155b15610183578061077881610a10565b9150506106ed565b825160009061078f83856109c9565b111561079a57600080fd5b5091016020012090565b73ffffffffffffffffffffffffffffffffffffffff811681146107c657600080fd5b50565b6000602082840312156107db57600080fd5b8135610183816107a4565b60005b838110156108015781810151838201526020016107e9565b83811115610810576000848401525b50505050565b60208152600082518060208401526108358160408501602087016107e6565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60006020828403121561087957600080fd5b8151610183816107a4565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602082840312156108c557600080fd5b815167ffffffffffffffff808211156108dd57600080fd5b818401915084601f8301126108f157600080fd5b81518181111561090357610903610884565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561094957610949610884565b8160405282815287602084870101111561096257600080fd5b6109738360208301602088016107e6565b979650505050505050565b600082516109908184602087016107e6565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156109dc576109dc61099a565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a4157610a4161099a565b506001019056fea26469706673582212207d93fbddc28e2bd1cdd4d6b3c0306ee0430bf0b08c8d4df2e950987d2143dcbf64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}