{
  "address": "0x9D2EEDCCd1E6Ad0F0C4e1dA729b3cc43816Ec676",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ENS",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_baseNode",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_proxyDomainDNSLength",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "resolve",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7a3206893957c600ecbf3684909aa93e08cc305a378a4a9b729100bbe3a3560a",
  "receipt": {
    "to": null,
    "from": "0x17F08783981Ff47638A046c5b88A0211132db2e0",
    "contractAddress": "0x9D2EEDCCd1E6Ad0F0C4e1dA729b3cc43816Ec676",
    "transactionIndex": 26,
    "gasUsed": "679720",
    "logsBloom": "0x
    "blockHash": "0x4625d4eac91b26f62bfaa86dde89f36892c14a6c25a645f1657acf0824c09e2d",
    "transactionHash": "0x7a3206893957c600ecbf3684909aa93e08cc305a378a4a9b729100bbe3a3560a",
    "logs": [],
    "blockNumber": 8704107,
    "cumulativeGasUsed": "2863368",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE8E0fFE372608122c10544c2445272eD8E79dbAB",
    "0x739305fdceb24221237c3dea9f36a6fcc8dc81b45730358192886e1510532739",
    15
  ],
  "numDeployments": 2,
  "solcInputHash": "5f5146659eb70f1e1b98acb3a923d3ea",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ENS\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_baseNode\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_proxyDomainDNSLength\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resolvers/ENSProxyResolver.sol\":\"ENSProxyResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\",\"keccak256\":\"0xf7291d7213336b00ee7edbf7cd5034778dd7b0bda2a7489e664f1e5cacc6c24e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0xf79be82c1a2eb0a77fba4e0972221912e803309081ca460fd2cf61653e55758a\"},\"contracts/resolvers/ENSProxyResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport '@openzeppelin/contracts/utils/introspection/ERC165Checker.sol';\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\nimport '../registry/ENS.sol';\\nimport './profiles/IAddrResolver.sol';\\nimport './profiles/IAddressResolver.sol';\\nimport './profiles/INameResolver.sol';\\nimport './profiles/IExtendedResolver.sol';\\nimport '../wrapper/BytesUtil.sol';\\n\\ncontract ENSProxyResolver is ERC165, IExtendedResolver {\\n  using BytesUtils for bytes;\\n\\n  ENS private immutable registry;\\n  bytes32 private immutable baseNode;\\n  uint256 private proxyDomainDNSLength;\\n\\n  constructor(\\n    ENS _registry,\\n    bytes32 _baseNode,\\n    uint256 _proxyDomainDNSLength\\n  ) {\\n    registry = _registry;\\n    baseNode = _baseNode;\\n    proxyDomainDNSLength = _proxyDomainDNSLength;\\n  }\\n\\n  function resolve(bytes calldata name, bytes calldata data)\\n    external\\n    view\\n    returns (bytes memory)\\n  {\\n    require(\\n      bytes4(data[0:4]) == bytes4(0x3b3b57de),\\n      'only addr(byte32) is supported'\\n    );\\n\\n    bytes memory nnsName = _removeProxyDomain(name);\\n    bytes32 node = nnsName.namehash(0, baseNode);\\n    address resolver = registry.resolver(node);\\n\\n    if (resolver == address(0)) {\\n      return new bytes(0);\\n    }\\n    (, bytes memory res) = resolver.staticcall(\\n      abi.encodeWithSelector(bytes4(0x3b3b57de), node)\\n    );\\n    return res;\\n  }\\n\\n  function _removeProxyDomain(bytes calldata name)\\n    private\\n    view\\n    returns (bytes memory)\\n  {\\n    require(name.length > proxyDomainDNSLength, \\\"name doesn't contain proxy\\\");\\n\\n    // name is dns-encoded with the proxy domain at the end and we need to remove it.\\n    // Eg: apbigcod.proxy.eth -> apbigcod\\n    // The last byte is the final 0x00.\\n\\n    // name.length includes the trailing zero\\n    // proxyDomainDNSLength includes the trailing zero\\n    // +1 to add the traling zero back.\\n    bytes memory noproxy = new bytes(name.length - proxyDomainDNSLength + 1);\\n    // Copy the name up the the start of the proxy name.\\n    uint256 i;\\n    for (i = 0; i < name.length - proxyDomainDNSLength; i++) {\\n      noproxy[i] = name[i];\\n    }\\n    // Final empty byte.\\n    noproxy[noproxy.length - 1] = 0x00;\\n    return noproxy;\\n  }\\n\\n  function supportsInterface(bytes4 interfaceID)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return\\n      interfaceID == type(IExtendedResolver).interfaceId ||\\n      super.supportsInterface(interfaceID);\\n  }\\n}\\n\",\"keccak256\":\"0xf94d3f277ae73eae166abbea095dad5961c06fe1e6f1551e7698af3f991c2562\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the legacy (ETH-only) addr function.\\n */\\ninterface IAddrResolver {\\n    event AddrChanged(bytes32 indexed node, address a);\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x2ad7f2fc60ebe0f93745fe70247f6a854f66af732483fda2a3c5e055614445e8\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the new (multicoin) addr function.\\n */\\ninterface IAddressResolver {\\n    event AddressChanged(bytes32 indexed node, uint coinType, bytes newAddress);\\n\\n    function addr(bytes32 node, uint coinType) external view returns(bytes memory);\\n}\\n\",\"keccak256\":\"0x20717682fa28eb1755a3b6ade738c8e0239c1cc393579058d4c3ffaca238c04b\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IExtendedResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IExtendedResolver {\\n  function resolve(bytes calldata name, bytes calldata data)\\n    external\\n    view\\n    returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x660cfb1714799f8a2048fa6a1678a40424522d212ed1d5551385d16456d72037\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/INameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface INameResolver {\\n    event NameChanged(bytes32 indexed node, string name);\\n\\n    /**\\n     * Returns the name associated with an ENS node, for reverse records.\\n     * Defined in EIP181.\\n     * @param node The ENS node to query.\\n     * @return The associated name.\\n     */\\n    function name(bytes32 node) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x9ec392b612447b1acbdc01114f2da2837a658d3f3157f60a99c5269f0b623346\",\"license\":\"MIT\"},\"contracts/wrapper/BytesUtil.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nlibrary BytesUtils {\\n  /*\\n   * @dev Returns the keccak-256 hash of a byte range.\\n   * @param self The byte string to hash.\\n   * @param offset The position to start hashing at.\\n   * @param len The number of bytes to hash.\\n   * @return The hash of the byte range.\\n   */\\n  function keccak(\\n    bytes memory self,\\n    uint256 offset,\\n    uint256 len\\n  ) internal pure returns (bytes32 ret) {\\n    require(offset + len <= self.length);\\n    assembly {\\n      ret := keccak256(add(add(self, 32), offset), len)\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the ENS namehash of a DNS-encoded name.\\n   * @param self The DNS-encoded name to hash.\\n   * @param offset The offset at which to start hashing.\\n   * @param rootNode keccak256 of the root node or zero.\\n   * @return The namehash of the name.\\n   */\\n  function namehash(\\n    bytes memory self,\\n    uint256 offset,\\n    bytes32 rootNode\\n  ) internal pure returns (bytes32) {\\n    (bytes32 labelhash, uint256 newOffset) = readLabel(self, offset);\\n    if (labelhash == bytes32(0)) {\\n      require(offset == self.length - 1, 'namehash: Junk at end of name');\\n      return rootNode;\\n    }\\n    return\\n      keccak256(\\n        abi.encodePacked(namehash(self, newOffset, rootNode), labelhash)\\n      );\\n  }\\n\\n  /**\\n   * @dev Returns the keccak-256 hash of a DNS-encoded label, and the offset to the start of the next label.\\n   * @param self The byte string to read a label from.\\n   * @param idx The index to read a label at.\\n   * @return labelhash The hash of the label at the specified index, or 0 if it is the last label.\\n   * @return newIdx The index of the start of the next label.\\n   */\\n  function readLabel(bytes memory self, uint256 idx)\\n    internal\\n    pure\\n    returns (bytes32 labelhash, uint256 newIdx)\\n  {\\n    require(idx < self.length, 'readLabel: Index out of bounds');\\n    uint256 len = uint256(uint8(self[idx]));\\n    if (len > 0) {\\n      labelhash = keccak(self, idx + 1, len);\\n    } else {\\n      labelhash = bytes32(0);\\n    }\\n    newIdx = idx + len + 1;\\n  }\\n}\\n\",\"keccak256\":\"0x0cdbe90904ba808aeec8ec5292f553aeaa4b5474bfdd8d27bd3b2874a4e6ab70\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610bac380380610bac83398101604081905261002f91610048565b6001600160a01b0390921660805260a05260005561008b565b60008060006060848603121561005d57600080fd5b83516001600160a01b038116811461007457600080fd5b602085015160409095015190969495509392505050565b60805160a051610afc6100b060003960006101fb015260006102690152610afc6000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806301ffc9a71461003b5780639061b92314610063575b600080fd5b61004e610049366004610796565b610083565b60405190151581526020015b60405180910390f35b610076610071366004610821565b61011c565b60405161005a91906108bd565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f9061b92300000000000000000000000000000000000000000000000000000000148061011657507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60607f3b3b57de0000000000000000000000000000000000000000000000000000000061014d60046000858761090e565b61015691610938565b7fffffffff0000000000000000000000000000000000000000000000000000000016146101e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f6f6e6c792061646472286279746533322920697320737570706f72746564000060448201526064015b60405180910390fd5b60006101f08686610419565b9050600061021f82827f00000000000000000000000000000000000000000000000000000000000000006105c7565b6040517f0178b8bf0000000000000000000000000000000000000000000000000000000081526004810182905290915060009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690630178b8bf90602401602060405180830381865afa1580156102b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d49190610980565b905073ffffffffffffffffffffffffffffffffffffffff811661030b57505060408051600081526020810190915291506104119050565b60008173ffffffffffffffffffffffffffffffffffffffff16633b3b57de60e01b8460405160240161033f91815260200190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516103c891906109e5565b600060405180830381855afa9150503d8060008114610403576040519150601f19603f3d011682016040523d82523d6000602084013e610408565b606091505b50955050505050505b949350505050565b6000546060908211610487576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f6e616d6520646f65736e277420636f6e7461696e2070726f787900000000000060448201526064016101db565b600080546104959084610a30565b6104a0906001610a47565b67ffffffffffffffff8111156104b8576104b86109b6565b6040519080825280601f01601f1916602001820160405280156104e2576020820181803683370190505b50905060005b6000546104f59085610a30565b81101561056b5784848281811061050e5761050e610a5f565b9050013560f81c60f81b82828151811061052a5761052a610a5f565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508061056381610a8e565b9150506104e8565b600060f81b826001845161057f9190610a30565b8151811061058f5761058f610a5f565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535090949350505050565b60008060006105d686866106a1565b90925090508161066057600186516105ee9190610a30565b8514610656576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f6e616d65686173683a204a756e6b20617420656e64206f66206e616d6500000060448201526064016101db565b839250505061069a565b61066b8682866105c7565b604080516020810192909252810183905260600160405160208183030381529060405280519060200120925050505b9392505050565b6000808351831061070e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f726561644c6162656c3a20496e646578206f7574206f6620626f756e6473000060448201526064016101db565b600084848151811061072257610722610a5f565b016020015160f81c9050801561074e5761074785610741866001610a47565b83610772565b9250610753565b600092505b61075d8185610a47565b610768906001610a47565b9150509250929050565b82516000906107818385610a47565b111561078c57600080fd5b5091016020012090565b6000602082840312156107a857600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461069a57600080fd5b60008083601f8401126107ea57600080fd5b50813567ffffffffffffffff81111561080257600080fd5b60208301915083602082850101111561081a57600080fd5b9250929050565b6000806000806040858703121561083757600080fd5b843567ffffffffffffffff8082111561084f57600080fd5b61085b888389016107d8565b9096509450602087013591508082111561087457600080fd5b50610881878288016107d8565b95989497509550505050565b60005b838110156108a8578181015183820152602001610890565b838111156108b7576000848401525b50505050565b60208152600082518060208401526108dc81604085016020870161088d565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6000808585111561091e57600080fd5b8386111561092b57600080fd5b5050820193919092039150565b7fffffffff0000000000000000000000000000000000000000000000000000000081358181169160048510156109785780818660040360031b1b83161692505b505092915050565b60006020828403121561099257600080fd5b815173ffffffffffffffffffffffffffffffffffffffff8116811461069a57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082516109f781846020870161088d565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015610a4257610a42610a01565b500390565b60008219821115610a5a57610a5a610a01565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610abf57610abf610a01565b506001019056fea264697066735822122006c4791517df20fbc12645346c6a2633515532546c67a2943864c66e2648e6a064736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806301ffc9a71461003b5780639061b92314610063575b600080fd5b61004e610049366004610796565b610083565b60405190151581526020015b60405180910390f35b610076610071366004610821565b61011c565b60405161005a91906108bd565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f9061b92300000000000000000000000000000000000000000000000000000000148061011657507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60607f3b3b57de0000000000000000000000000000000000000000000000000000000061014d60046000858761090e565b61015691610938565b7fffffffff0000000000000000000000000000000000000000000000000000000016146101e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f6f6e6c792061646472286279746533322920697320737570706f72746564000060448201526064015b60405180910390fd5b60006101f08686610419565b9050600061021f82827f00000000000000000000000000000000000000000000000000000000000000006105c7565b6040517f0178b8bf0000000000000000000000000000000000000000000000000000000081526004810182905290915060009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690630178b8bf90602401602060405180830381865afa1580156102b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d49190610980565b905073ffffffffffffffffffffffffffffffffffffffff811661030b57505060408051600081526020810190915291506104119050565b60008173ffffffffffffffffffffffffffffffffffffffff16633b3b57de60e01b8460405160240161033f91815260200190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516103c891906109e5565b600060405180830381855afa9150503d8060008114610403576040519150601f19603f3d011682016040523d82523d6000602084013e610408565b606091505b50955050505050505b949350505050565b6000546060908211610487576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f6e616d6520646f65736e277420636f6e7461696e2070726f787900000000000060448201526064016101db565b600080546104959084610a30565b6104a0906001610a47565b67ffffffffffffffff8111156104b8576104b86109b6565b6040519080825280601f01601f1916602001820160405280156104e2576020820181803683370190505b50905060005b6000546104f59085610a30565b81101561056b5784848281811061050e5761050e610a5f565b9050013560f81c60f81b82828151811061052a5761052a610a5f565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508061056381610a8e565b9150506104e8565b600060f81b826001845161057f9190610a30565b8151811061058f5761058f610a5f565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535090949350505050565b60008060006105d686866106a1565b90925090508161066057600186516105ee9190610a30565b8514610656576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f6e616d65686173683a204a756e6b20617420656e64206f66206e616d6500000060448201526064016101db565b839250505061069a565b61066b8682866105c7565b604080516020810192909252810183905260600160405160208183030381529060405280519060200120925050505b9392505050565b6000808351831061070e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f726561644c6162656c3a20496e646578206f7574206f6620626f756e6473000060448201526064016101db565b600084848151811061072257610722610a5f565b016020015160f81c9050801561074e5761074785610741866001610a47565b83610772565b9250610753565b600092505b61075d8185610a47565b610768906001610a47565b9150509250929050565b82516000906107818385610a47565b111561078c57600080fd5b5091016020012090565b6000602082840312156107a857600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461069a57600080fd5b60008083601f8401126107ea57600080fd5b50813567ffffffffffffffff81111561080257600080fd5b60208301915083602082850101111561081a57600080fd5b9250929050565b6000806000806040858703121561083757600080fd5b843567ffffffffffffffff8082111561084f57600080fd5b61085b888389016107d8565b9096509450602087013591508082111561087457600080fd5b50610881878288016107d8565b95989497509550505050565b60005b838110156108a8578181015183820152602001610890565b838111156108b7576000848401525b50505050565b60208152600082518060208401526108dc81604085016020870161088d565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6000808585111561091e57600080fd5b8386111561092b57600080fd5b5050820193919092039150565b7fffffffff0000000000000000000000000000000000000000000000000000000081358181169160048510156109785780818660040360031b1b83161692505b505092915050565b60006020828403121561099257600080fd5b815173ffffffffffffffffffffffffffffffffffffffff8116811461069a57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082516109f781846020870161088d565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015610a4257610a42610a01565b500390565b60008219821115610a5a57610a5a610a01565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610abf57610abf610a01565b506001019056fea264697066735822122006c4791517df20fbc12645346c6a2633515532546c67a2943864c66e2648e6a064736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14229,
        "contract": "contracts/resolvers/ENSProxyResolver.sol:ENSProxyResolver",
        "label": "proxyDomainDNSLength",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}