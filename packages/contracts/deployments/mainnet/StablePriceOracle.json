{
  "address": "0xF4fA6B89B4C1677d07b530cec1D505D19167eC48",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract AggregatorInterface",
          "name": "_usdOracle",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_rentPrices",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        }
      ],
      "name": "RentPriceChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "premium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price1Letter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price2Letter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price3Letter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price4Letter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price5Letter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdOracle",
      "outputs": [
        {
          "internalType": "contract AggregatorInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x57e47c9d1774a35f58684f43767c92286ecaaa7dc5372fcf7b65c9b2b3e7b565",
  "receipt": {
    "to": null,
    "from": "0xE5358CaB95014E2306815743793F16c93a8a5C70",
    "contractAddress": "0xF4fA6B89B4C1677d07b530cec1D505D19167eC48",
    "transactionIndex": 272,
    "gasUsed": "573556",
    "logsBloom": "0x
    "blockHash": "0xb2419329c165c2629c9c5e0dacd076347f5031417fb620c975cc643ddc09532c",
    "transactionHash": "0x57e47c9d1774a35f58684f43767c92286ecaaa7dc5372fcf7b65c9b2b3e7b565",
    "logs": [],
    "blockNumber": 15229040,
    "cumulativeGasUsed": "21462300",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5f4ec3df9cbd43714fe2740f5e3616155c5b8419",
    [
      "1000000000000000000000",
      "500000000000000000000",
      "250000000000000000000",
      "100000000000000000000",
      "100000000000000000000"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "d1e7b115564b0e977220c78df49e4073",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"_usdOracle\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_rentPrices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"name\":\"RentPriceChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"premium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1Letter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price2Letter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price3Letter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price4Letter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price5Letter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdOracle\",\"outputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"premium(string)\":{\"details\":\"Returns the pricing premium in wei.\"},\"price(string)\":{\"details\":\"Returns the price to register a name.\",\"params\":{\"name\":\"The name being registered.\"},\"returns\":{\"_0\":\"The price of this registration, in wei.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ethregistrar/StablePriceOracle.sol\":\"StablePriceOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ethregistrar/IPriceOracle.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface IPriceOracle {\\n     /**\\n     * @dev Returns the price to register a name.\\n     * @param name The name being registered.\\n     * @return The price of this registration, in wei.\\n     */\\n    function price(string calldata name) external view returns(uint);\\n}\\n\",\"keccak256\":\"0xb52a2f39c039b5644464b15419b4ba693087745dd98a782a91f724f34b3ca793\"},\"contracts/ethregistrar/SafeMath.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\n/**\\n * @title SafeMath\\n * @dev Unsigned math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    /**\\n    * @dev Multiplies two unsigned integers, reverts on overflow.\\n    */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two unsigned integers, reverts on overflow.\\n    */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe0d6a6c8982dd734335683451a3914cbb49801203772b9fc1fd1efacae75d4ce\"},\"contracts/ethregistrar/StablePriceOracle.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"./IPriceOracle.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./StringUtils.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface AggregatorInterface {\\n    function latestAnswer() external view returns (int256);\\n}\\n\\n// StablePriceOracle sets a price in USD, based on an oracle.\\ncontract StablePriceOracle is IPriceOracle {\\n    using SafeMath for *;\\n    using StringUtils for *;\\n\\n    // Rent in base price units by length\\n    uint256 public immutable price1Letter;\\n    uint256 public immutable price2Letter;\\n    uint256 public immutable price3Letter;\\n    uint256 public immutable price4Letter;\\n    uint256 public immutable price5Letter;\\n\\n    // Oracle address\\n    AggregatorInterface public immutable usdOracle;\\n\\n    event RentPriceChanged(uint256[] prices);\\n\\n    constructor(AggregatorInterface _usdOracle, uint256[] memory _rentPrices) {\\n        usdOracle = _usdOracle;\\n        price1Letter = _rentPrices[0];\\n        price2Letter = _rentPrices[1];\\n        price3Letter = _rentPrices[2];\\n        price4Letter = _rentPrices[3];\\n        price5Letter = _rentPrices[4];\\n    }\\n\\n    function price(string calldata name) external view returns(uint) {\\n        uint256 len = name.strlen();\\n        uint256 basePrice;\\n        if (len >= 5) {\\n            basePrice = price5Letter;\\n        } else if (len == 4) {\\n            basePrice = price4Letter;\\n        } else if (len == 3) {\\n            basePrice = price3Letter;\\n        } else if (len == 2) {\\n            basePrice = price2Letter;\\n        } else {\\n            basePrice = price1Letter;\\n        }\\n\\n        return attoUSDToWei(basePrice) + attoUSDToWei(_premium(name));\\n    }\\n\\n    /**\\n     * @dev Returns the pricing premium in wei.\\n     */\\n    function premium(string calldata name) external view returns (uint256) {\\n        return attoUSDToWei(_premium(name));\\n    }\\n\\n    /**\\n     * @dev Returns the pricing premium in internal base units.\\n     */\\n    function _premium(string memory name) internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    function attoUSDToWei(uint256 amount) internal view returns (uint256) {\\n        uint256 ethPrice = uint256(usdOracle.latestAnswer());\\n        return (amount * 1e8) / ethPrice;\\n    }\\n\\n    function weiToAttoUSD(uint256 amount) internal view returns (uint256) {\\n        uint256 ethPrice = uint256(usdOracle.latestAnswer());\\n        return (amount * ethPrice) / 1e8;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID)\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return\\n            interfaceID == type(IERC165).interfaceId ||\\n            interfaceID == type(IPriceOracle).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x23b1111b6ff7a96a0b0f3d924747fa6289b9dafd995469d1f37cab3de4f917f5\"},\"contracts/ethregistrar/StringUtils.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nlibrary StringUtils {\\n    /**\\n     * @dev Returns the length of a given string\\n     *\\n     * @param s The string to measure the length of\\n     * @return The length of the input string\\n     */\\n    function strlen(string memory s) internal pure returns (uint) {\\n        uint len;\\n        uint i = 0;\\n        uint bytelength = bytes(s).length;\\n        for(len = 0; i < bytelength; len++) {\\n            bytes1 b = bytes(s)[i];\\n            if(b < 0x80) {\\n                i += 1;\\n            } else if (b < 0xE0) {\\n                i += 2;\\n            } else if (b < 0xF0) {\\n                i += 3;\\n            } else if (b < 0xF8) {\\n                i += 4;\\n            } else if (b < 0xFC) {\\n                i += 5;\\n            } else {\\n                i += 6;\\n            }\\n        }\\n        return len;\\n    }\\n}\\n\",\"keccak256\":\"0x48828eaf42494879c04f560e7b17a402d0a8922fc2047844c338776239fd5c80\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b5060405162000bf938038062000bf983398101604081905262000035916200011b565b6001600160a01b038216610120528051819060009062000059576200005962000208565b602002602001015160808181525050806001815181106200007e576200007e62000208565b602002602001015160a0818152505080600281518110620000a357620000a362000208565b602002602001015160c0818152505080600381518110620000c857620000c862000208565b602002602001015160e0818152505080600481518110620000ed57620000ed62000208565b6020026020010151610100818152505050506200021e565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156200012f57600080fd5b82516001600160a01b03811681146200014757600080fd5b602084810151919350906001600160401b03808211156200016757600080fd5b818601915086601f8301126200017c57600080fd5b81518181111562000191576200019162000105565b8060051b604051601f19603f83011681018181108582111715620001b957620001b962000105565b604052918252848201925083810185019189831115620001d857600080fd5b938501935b82851015620001f857845184529385019392850192620001dd565b8096505050505050509250929050565b634e487b7160e01b600052603260045260246000fd5b60805160a05160c05160e0516101005161012051610962620002976000396000818161016b015261048a01526000818161010a015261034d0152600081816101de015261037c01526000818161014401526103ab0152600081816101b701526103da01526000818160d5015261040101526109626000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063a200e15311610076578063cd5d2c741161005b578063cd5d2c74146101b2578063d820ed42146101d9578063fe2c61981461020057600080fd5b8063a200e1531461013f578063c8a4271f1461016657600080fd5b806301ffc9a7146100a85780632c0fd74c146100d057806359b6b86c146101055780638fb006881461012c575b600080fd5b6100bb6100b6366004610739565b610213565b60405190151581526020015b60405180910390f35b6100f77f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016100c7565b6100f77f000000000000000000000000000000000000000000000000000000000000000081565b6100f761013a36600461077b565b6102ac565b6100f77f000000000000000000000000000000000000000000000000000000000000000081565b61018d7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100c7565b6100f77f000000000000000000000000000000000000000000000000000000000000000081565b6100f77f000000000000000000000000000000000000000000000000000000000000000081565b6100f761020e36600461077b565b6102fc565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a70000000000000000000000000000000000000000000000000000000014806102a657507fffffffff0000000000000000000000000000000000000000000000000000000082167ffe2c619800000000000000000000000000000000000000000000000000000000145b92915050565b60006102f56102f084848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061047f92505050565b610485565b9392505050565b60008061033e84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061053292505050565b905060006005821061037157507f0000000000000000000000000000000000000000000000000000000000000000610421565b816004036103a057507f0000000000000000000000000000000000000000000000000000000000000000610421565b816003036103cf57507f0000000000000000000000000000000000000000000000000000000000000000610421565b816002036103fe57507f0000000000000000000000000000000000000000000000000000000000000000610421565b507f00000000000000000000000000000000000000000000000000000000000000005b6104636102f086868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061047f92505050565b61046c82610485565b610476919061081c565b95945050505050565b50600090565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105179190610834565b905080610528846305f5e10061084d565b6102f5919061088a565b8051600090819081905b80821015610730576000858381518110610558576105586108c5565b01602001517fff000000000000000000000000000000000000000000000000000000000000001690507f80000000000000000000000000000000000000000000000000000000000000008110156105bb576105b460018461081c565b925061071d565b7fe0000000000000000000000000000000000000000000000000000000000000007fff0000000000000000000000000000000000000000000000000000000000000082161015610610576105b460028461081c565b7ff0000000000000000000000000000000000000000000000000000000000000007fff0000000000000000000000000000000000000000000000000000000000000082161015610665576105b460038461081c565b7ff8000000000000000000000000000000000000000000000000000000000000007fff00000000000000000000000000000000000000000000000000000000000000821610156106ba576105b460048461081c565b7ffc000000000000000000000000000000000000000000000000000000000000007fff000000000000000000000000000000000000000000000000000000000000008216101561070f576105b460058461081c565b61071a60068461081c565b92505b5082610728816108f4565b93505061053c565b50909392505050565b60006020828403121561074b57600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146102f557600080fd5b6000806020838503121561078e57600080fd5b823567ffffffffffffffff808211156107a657600080fd5b818501915085601f8301126107ba57600080fd5b8135818111156107c957600080fd5b8660208285010111156107db57600080fd5b60209290920196919550909350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000821982111561082f5761082f6107ed565b500190565b60006020828403121561084657600080fd5b5051919050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610885576108856107ed565b500290565b6000826108c0577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610925576109256107ed565b506001019056fea2646970667358221220b47ed0d3ec28cb427b946672142faf8769d735dd12332ddcec62542f5600556a64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a35760003560e01c8063a200e15311610076578063cd5d2c741161005b578063cd5d2c74146101b2578063d820ed42146101d9578063fe2c61981461020057600080fd5b8063a200e1531461013f578063c8a4271f1461016657600080fd5b806301ffc9a7146100a85780632c0fd74c146100d057806359b6b86c146101055780638fb006881461012c575b600080fd5b6100bb6100b6366004610739565b610213565b60405190151581526020015b60405180910390f35b6100f77f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016100c7565b6100f77f000000000000000000000000000000000000000000000000000000000000000081565b6100f761013a36600461077b565b6102ac565b6100f77f000000000000000000000000000000000000000000000000000000000000000081565b61018d7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100c7565b6100f77f000000000000000000000000000000000000000000000000000000000000000081565b6100f77f000000000000000000000000000000000000000000000000000000000000000081565b6100f761020e36600461077b565b6102fc565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a70000000000000000000000000000000000000000000000000000000014806102a657507fffffffff0000000000000000000000000000000000000000000000000000000082167ffe2c619800000000000000000000000000000000000000000000000000000000145b92915050565b60006102f56102f084848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061047f92505050565b610485565b9392505050565b60008061033e84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061053292505050565b905060006005821061037157507f0000000000000000000000000000000000000000000000000000000000000000610421565b816004036103a057507f0000000000000000000000000000000000000000000000000000000000000000610421565b816003036103cf57507f0000000000000000000000000000000000000000000000000000000000000000610421565b816002036103fe57507f0000000000000000000000000000000000000000000000000000000000000000610421565b507f00000000000000000000000000000000000000000000000000000000000000005b6104636102f086868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061047f92505050565b61046c82610485565b610476919061081c565b95945050505050565b50600090565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105179190610834565b905080610528846305f5e10061084d565b6102f5919061088a565b8051600090819081905b80821015610730576000858381518110610558576105586108c5565b01602001517fff000000000000000000000000000000000000000000000000000000000000001690507f80000000000000000000000000000000000000000000000000000000000000008110156105bb576105b460018461081c565b925061071d565b7fe0000000000000000000000000000000000000000000000000000000000000007fff0000000000000000000000000000000000000000000000000000000000000082161015610610576105b460028461081c565b7ff0000000000000000000000000000000000000000000000000000000000000007fff0000000000000000000000000000000000000000000000000000000000000082161015610665576105b460038461081c565b7ff8000000000000000000000000000000000000000000000000000000000000007fff00000000000000000000000000000000000000000000000000000000000000821610156106ba576105b460048461081c565b7ffc000000000000000000000000000000000000000000000000000000000000007fff000000000000000000000000000000000000000000000000000000000000008216101561070f576105b460058461081c565b61071a60068461081c565b92505b5082610728816108f4565b93505061053c565b50909392505050565b60006020828403121561074b57600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146102f557600080fd5b6000806020838503121561078e57600080fd5b823567ffffffffffffffff808211156107a657600080fd5b818501915085601f8301126107ba57600080fd5b8135818111156107c957600080fd5b8660208285010111156107db57600080fd5b60209290920196919550909350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000821982111561082f5761082f6107ed565b500190565b60006020828403121561084657600080fd5b5051919050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610885576108856107ed565b500290565b6000826108c0577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610925576109256107ed565b506001019056fea2646970667358221220b47ed0d3ec28cb427b946672142faf8769d735dd12332ddcec62542f5600556a64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "premium(string)": {
        "details": "Returns the pricing premium in wei."
      },
      "price(string)": {
        "details": "Returns the price to register a name.",
        "params": {
          "name": "The name being registered."
        },
        "returns": {
          "_0": "The price of this registration, in wei."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}